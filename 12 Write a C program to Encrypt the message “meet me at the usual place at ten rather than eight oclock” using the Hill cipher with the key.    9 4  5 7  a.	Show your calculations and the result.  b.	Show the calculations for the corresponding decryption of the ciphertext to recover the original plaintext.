#include <stdio.h>
#include <string.h>
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}
int mod26(int x) {
    return ((x % 26) + 26) % 26;
}
int determinant(int key[2][2]) {
    return mod26(key[0][0] * key[1][1] - key[0][1] * key[1][0]);
}
void inverseMatrix(int key[2][2], int inv[2][2]) {
    int det = determinant(key);
    int det_inv = modInverse(det, 26);
    
    inv[0][0] = mod26(key[1][1] * det_inv);
    inv[0][1] = mod26(-key[0][1] * det_inv);
    inv[1][0] = mod26(-key[1][0] * det_inv);
    inv[1][1] = mod26(key[0][0] * det_inv);
}
void matrixMultiply(int key[2][2], int vector[2], int result[2]) {
    result[0] = mod26(key[0][0] * vector[0] + key[0][1] * vector[1]);
    result[1] = mod26(key[1][0] * vector[0] + key[1][1] * vector[1]);
}
int charToNum(char c) {
    return c - 'a';
}
char numToChar(int num) {
    return num + 'a';
}
void encrypt(char *plaintext, int key[2][2], char *ciphertext) {
    int length = strlen(plaintext);
    for (int i = 0; i < length; i += 2) {
        int vector[2] = {charToNum(plaintext[i]), charToNum(plaintext[i + 1])};
        int result[2];
        matrixMultiply(key, vector, result);
        ciphertext[i] = numToChar(result[0]);
        ciphertext[i + 1] = numToChar(result[1]);
    }
    ciphertext[length] = '\0';
}
void decrypt(char *ciphertext, int invKey[2][2], char *plaintext) {
    int length = strlen(ciphertext);
    for (int i = 0; i < length; i += 2) {
        int vector[2] = {charToNum(ciphertext[i]), charToNum(ciphertext[i + 1])};
        int result[2];
        matrixMultiply(invKey, vector, result);
        plaintext[i] = numToChar(result[0]);
        plaintext[i + 1] = numToChar(result[1]);
    }
    plaintext[length] = '\0';
}

int main() {
    char plaintext[] = "meetmeatheeuselolplace at ";
    char ciphertext[100], decryptedText[100];
    int key[2][2] = {{9, 4}, {5, 7}};
        encrypt(plaintext, key, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);
    int invKey[2][2];
    inverseMatrix(key, invKey);
    decrypt(ciphertext, invKey, decryptedText);
    printf("Decrypted Text: %s\n", decryptedText);
    return 0;
}
